// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace RestClientSDKlibrary
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for RestClientSDKlibraryClient.
    /// </summary>
    public static partial class RestClientSDKlibraryClientExtensions
    {
            /// <summary>
            /// Retrieves a task from the database by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the task that needs to be retrieved
            /// </param>
            public static object GetTaskById(this IRestClientSDKlibraryClient operations, long id)
            {
                return Task.Factory.StartNew(s => ((IRestClientSDKlibraryClient)s).GetTaskByIdAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a task from the database by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// The id of the task that needs to be retrieved
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTaskByIdAsync(this IRestClientSDKlibraryClient operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTaskByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the parameters of an already existing task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of the task that needs to be updated
            /// </param>
            /// <param name='body'>
            /// </param>
            public static ErrorResponse UpdateTask(this IRestClientSDKlibraryClient operations, long id, TaskUpdatePayload body = default(TaskUpdatePayload))
            {
                return Task.Factory.StartNew(s => ((IRestClientSDKlibraryClient)s).UpdateTaskAsync(id, body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the parameters of an already existing task
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of the task that needs to be updated
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> UpdateTaskAsync(this IRestClientSDKlibraryClient operations, long id, TaskUpdatePayload body = default(TaskUpdatePayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTaskWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes tasks from the database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of the task that needs to be deleted
            /// </param>
            public static ErrorResponse DeleteTaskById(this IRestClientSDKlibraryClient operations, long id)
            {
                return Task.Factory.StartNew(s => ((IRestClientSDKlibraryClient)s).DeleteTaskByIdAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes tasks from the database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// id of the task that needs to be deleted
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ErrorResponse> DeleteTaskByIdAsync(this IRestClientSDKlibraryClient operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteTaskByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds valid tasks to the database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// taskName, isCompleted and DueDate are required fields
            /// </param>
            public static object CreateTask(this IRestClientSDKlibraryClient operations, TaskCreatePayload body = default(TaskCreatePayload))
            {
                return Task.Factory.StartNew(s => ((IRestClientSDKlibraryClient)s).CreateTaskAsync(body), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds valid tasks to the database
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// taskName, isCompleted and DueDate are required fields
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateTaskAsync(this IRestClientSDKlibraryClient operations, TaskCreatePayload body = default(TaskCreatePayload), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTaskWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the full list of tasks (options to sort/filter)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderByDate'>
            /// Can be Asc or Desc
            /// </param>
            /// <param name='taskStatus'>
            /// Can be Completed, NotCompleted or All
            /// </param>
            public static object GetAllTasks(this IRestClientSDKlibraryClient operations, string orderByDate = "Asc", string taskStatus = "All")
            {
                return Task.Factory.StartNew(s => ((IRestClientSDKlibraryClient)s).GetAllTasksAsync(orderByDate, taskStatus), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the full list of tasks (options to sort/filter)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='orderByDate'>
            /// Can be Asc or Desc
            /// </param>
            /// <param name='taskStatus'>
            /// Can be Completed, NotCompleted or All
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAllTasksAsync(this IRestClientSDKlibraryClient operations, string orderByDate = "Asc", string taskStatus = "All", CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllTasksWithHttpMessagesAsync(orderByDate, taskStatus, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
