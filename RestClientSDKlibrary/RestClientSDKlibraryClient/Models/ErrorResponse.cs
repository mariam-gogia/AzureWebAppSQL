// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace RestClientSDKlibrary.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// Error response structure
    /// </summary>
    public partial class ErrorResponse
    {
        /// <summary>
        /// Initializes a new instance of the ErrorResponse class.
        /// </summary>
        public ErrorResponse() { }

        /// <summary>
        /// Initializes a new instance of the ErrorResponse class.
        /// </summary>
        public ErrorResponse(int errorNumber, string errorDescription, string parameterName = default(string), string parameterValue = default(string))
        {
            ErrorNumber = errorNumber;
            ParameterName = parameterName;
            ParameterValue = parameterValue;
            ErrorDescription = errorDescription;
        }

        /// <summary>
        /// The number representing the error
        /// </summary>
        [JsonProperty(PropertyName = "errorNumber")]
        public int ErrorNumber { get; set; }

        /// <summary>
        /// Name of the parameter where the error occured
        /// </summary>
        [JsonProperty(PropertyName = "parameterName")]
        public string ParameterName { get; set; }

        /// <summary>
        /// The value that caused the error in the parameter
        /// </summary>
        [JsonProperty(PropertyName = "parameterValue")]
        public string ParameterValue { get; set; }

        /// <summary>
        /// The descreption of the error
        /// </summary>
        [JsonProperty(PropertyName = "errorDescription")]
        public string ErrorDescription { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (ErrorDescription == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ErrorDescription");
            }
        }
    }
}
