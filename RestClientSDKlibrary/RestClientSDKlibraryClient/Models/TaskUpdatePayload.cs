// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace RestClientSDKlibrary.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    /// <summary>
    /// The task updating shape
    /// </summary>
    public partial class TaskUpdatePayload
    {
        /// <summary>
        /// Initializes a new instance of the TaskUpdatePayload class.
        /// </summary>
        public TaskUpdatePayload() { }

        /// <summary>
        /// Initializes a new instance of the TaskUpdatePayload class.
        /// </summary>
        public TaskUpdatePayload(string taskName, bool isCompleted, DateTime dueDate)
        {
            TaskName = taskName;
            IsCompleted = isCompleted;
            DueDate = dueDate;
        }

        /// <summary>
        /// Gets or sets the task name
        /// </summary>
        [JsonProperty(PropertyName = "taskName")]
        public string TaskName { get; set; }

        /// <summary>
        /// Gets or sets boolean value (true/false) to isCompleted
        /// </summary>
        [JsonProperty(PropertyName = "isCompleted")]
        public bool IsCompleted { get; set; }

        /// <summary>
        /// Gets or sets due date
        /// </summary>
        [JsonProperty(PropertyName = "dueDate")]
        public DateTime DueDate { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (TaskName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TaskName");
            }
            if (this.TaskName != null)
            {
                if (this.TaskName.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "TaskName", 100);
                }
                if (this.TaskName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "TaskName", 0);
                }
            }
        }
    }
}
